const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PNG –∏–∑ SVG
async function generatePNGFromSVG(svgPath, pngPath, size) {
  try {
    console.log(`–ì–µ–Ω–µ—Ä–∏—Ä—É—é ${path.basename(pngPath)} —Ä–∞–∑–º–µ—Ä–æ–º ${size}x${size}...`);
    
    // –ß–∏—Ç–∞–µ–º SVG —Ñ–∞–π–ª
    const svgBuffer = fs.readFileSync(svgPath);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
    await sharp(svgBuffer)
      .resize(size, size)
      .png()
      .toFile(pngPath);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω: ${path.basename(pngPath)}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${path.basename(pngPath)}:`, error.message);
  }
}

// –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
const iconSizes = {
  'icon.png': 1024,           // –û—Å–Ω–æ–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞
  'adaptive-icon.png': 1024,  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è Android
  'splash-icon.png': 400,     // –ò–∫–æ–Ω–∫–∞ –¥–ª—è splash screen
  'favicon.png': 32,          // Favicon –¥–ª—è –≤–µ–±
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è iOS
const iosIconSizes = {
  'ios-180.png': 180,
  'ios-120.png': 120,
  'ios-87.png': 87,
  'ios-80.png': 80,
  'ios-76.png': 76,
  'ios-60.png': 60,
  'ios-40.png': 40,
  'ios-29.png': 29,
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è Android
const androidIconSizes = {
  'android-512.png': 512,
  'android-192.png': 192,
  'android-144.png': 144,
  'android-96.png': 96,
  'android-72.png': 72,
  'android-48.png': 48,
};

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã
const allIconSizes = { ...iconSizes, ...iosIconSizes, ...androidIconSizes };

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function generateAllIcons() {
  console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n');
  
  const imagesDir = path.join(__dirname, '..', 'assets', 'images');
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!fs.existsSync(imagesDir)) {
    fs.mkdirSync(imagesDir, { recursive: true });
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∏–∫–æ–Ω–∫–∏
  for (const [filename, size] of Object.entries(allIconSizes)) {
    const svgPath = path.join(imagesDir, filename.replace('.png', '.svg'));
    const pngPath = path.join(imagesDir, filename);
    
    if (fs.existsSync(svgPath)) {
      await generatePNGFromSVG(svgPath, pngPath, size);
    } else {
      console.log(`‚ùå SVG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${path.basename(svgPath)}`);
    }
  }
  
  console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüì± –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  const files = fs.readdirSync(imagesDir);
  files.forEach(file => {
    if (file.endsWith('.png')) {
      const stats = fs.statSync(path.join(imagesDir, file));
      console.log(`  ‚úÖ ${file} (${stats.size} bytes)`);
    }
  });
  
  console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ PNG —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ assets/images/');
  console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –≤ app.json —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã');
  console.log('3. –î–ª—è iOS –¥–æ–±–∞–≤—å—Ç–µ –∏–∫–æ–Ω–∫–∏ –≤ ios/YourApp/Images.xcassets/');
  console.log('4. –î–ª—è Android –∏–∫–æ–Ω–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç—è—Ç—Å—è –∏–∑ assets/images/');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateAllIcons().catch(console.error); 